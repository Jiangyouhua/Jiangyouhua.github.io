/**
 * HTML类：简化js输出html元素
 * 1. String(), 输出字符串
 * 2. Element(), 输出DOM.Element
 *
 *  类属性
 * _tag, html元素的标签名
 * _style, html元素的风格
 * _attr, html元素的属性
 * _class, html元素的类别
 * _content, 内html元素的容
 */

class Html {
    _element = document.createElement("div")

    constructor(_tag = "div", _content, _style = {}, _attr = {}, _class = []) {
        this.setTag(_tag);
        this.setContent(_content);
        this.setStyle(_style);
        this.setAttr(_attr);
        this.setClass(_class);
    }

    // 下列赋值均需要判断数据类型。

    // 标签。
    setTag(tag) {
        if(!!tag){
            return;
        }
        // 标签只能是字符。
        if (typeof tag == "string") {
            this._element.setTag
        }
        return this;
    }

    // 设置内容。 
    setContent(content) {
        this._content = [];
        return this.addContent(content)
    }

    // 添加内容。
    addContent(content) {
        if(!content){
            return;
        }
        this._content.push(content);
        return this;
    }

    /** Style */
    // SetStyle 去除所有重新设置。
    setStyle(key, value) {
        this_style = {};
        return this.AddStyle(key, value);
    }

    addStyle(key, value) {
        if(!key){
            return;
        }
        this._style[key] = value;
        return this;
    }

    removeStyle(key) {
        delete this._style[key];
        return this;
    }

    setStyleWithObject(object) {
        this._style = {}
        return addStyleWithObject(object);
    }

    addStyleWithObject(object) {
        if(!object){
            return;
        }
        if (typeof object == 'object') {
            Object.assign(this._style, object);
        }
        return this;
    }

    /** Attr */
    setAttr(key, value) {
        this_style = {};
        return this.setAttr(key, value);
    }

    setAttr(key, value) {
        if(!!key){
            return;
        }
        this._attr[key] = value;
        return this;
    }

    removeAttr(key) {
        delete this._attr[key];
        return this;
    }

    setAttrWithObject(object) {
        this._attr = {}
        return this.addAttrWithObject(object);
    }

    addAttrWithObject(object) {
        if(!!object){
            return;
        }
        if (typeof object == 'object') {
            return Object.assign(this._attr, object);
        }
        return this;
    }

    /** Class */
    setClass(name) {
        this._class = [];
        return this.addClass(name)
    }

    addClass(name) {
        if(!name){
            return;
        }
        this._class.push(name)
        return this;
    }

    setClassWithArray(array) {
        this._class = [];
        return this.addClassWithArray(array);
    }

    addClassWithArray(array) {
        if(!array){
            return;
        }
        if (array instanceof Array) {
            this._class.concat(array)
        }
        return this;
    }

    _forTag() {
        let s = "div";
        if (this._tag === undefined || this._tag === NaN) {
            return s;
        }
        s = this._tag.toString();
        if (s.length == 0) {
            s = "div";
        }
        return s;
    }

    _forStyle() {
        // 空则返回空。
        if (Object.keys(this._style).length == 0) {
            return "";
        }
        // 不空则返回内容。
        let s = "";
        for(let key in this._style) {
            let value = this._style[key]
            let v = key;
            if (value !== undefined && value !== NaN) {
                v = `${key}:${value.toString()}`;
            }
            s += v;
        }
        return ` style="${s}"`;
    }

    _forAttr() {
        // 空则返回空。
        if (Object.keys(this._attr).length == 0) {
            return "";
        }
        // 不空则返回内容。
        let s = [];
        for(let key in this._attr) {
            let value = this._attr[key];
            // 专用的Class设置优先。
            if (key == 'class') {
                this._attr.unshift(value)
                continue;
            }
            // 无值属性。
            let v = key;
            if (value !== undefined && value !== NaN) {
                v = `${key} = "${value.toString()}"`;
            }
            s.push(v);
        }
        return ` ${s.join(" ")}`;
    }

    _forClass() {
        if (this._class.length == 0) {
            return "";
        }
        let s = [];
        for(let index in this._class) {
            let value = this._class[index];
            if (value === undefined || value === NaN) {
                continue;
            }
            s.push(value.toString());
        }
        return ` class="${s.join(" ")}"`;
    }

    _forContent() {
        if (this._content.length == 0) {
            return "";
        }
        let s = "";
        for(let i = 0; i < this._content.length; i++) {
            let value = this._content[i];
            if (value === undefined || value === NaN) {
                continue;
            }
            s += value.toString();
        }
        return s
    }

    toString() {
        let t = this._forTag();
        let s = this._forStyle();
        let a = this._forAttr();
        let c = this._forClass();
        // 单标签。
        if (['br', 'hr', 'img', 'input', 'param', 'meta', 'link', 'animateTransform'].indexOf(t) > -1) {
            return `<${t}${s}${a}${c} />`;
        }
        let e = this._forContent();
        // 双标签。
        return `<${t}${s}${a}${c}>${e}</${t}>`;
    }

    toElement() {
        let div = document.createElement("div");
        div.innerHTML = this.toString();
        return div.childNodes[0];
    }
}